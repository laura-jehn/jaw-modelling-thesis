package artisynth.core.util;

import org.jsoup.*;
import org.jsoup.nodes.*;
import org.jsoup.select.*;

import java.io.File;
import java.util.*;
import java.io.IOException;
import java.io.PrintWriter;

import maspack.util.IndentingPrintWriter;

/**
 * Converts an HTML table of contents (generated by LaTeXML and latexmlpost)
 * into an xml table of contents file for use by Eclipse infocenter.
 */
public class BuildInfoCenterToc {

   private String myHtmlPrefix = "";

   private class TocEntry {
      String title;
      String href;
      int level;

      TocEntry (String title, String href, int level) {
         this.title = title;
         this.href = href;
         this.level = level;
      }
   };

   void setHtmlPrefix (String prefix) {
      myHtmlPrefix = prefix;
   }

   String getHtmlPrefix() {
      return myHtmlPrefix;
   }

   private String getPrefix (String text) {
      int i0 = 0;
      while (Character.isWhitespace(text.charAt(i0))) {
         i0++;
      }
      int i1 = i0;
      while (i1 < text.length() && !Character.isWhitespace(text.charAt(i1))) {
         i1++;
      }
      return text.substring (i0, i1);
   }

   private int numPeriods (String str) {
      int nump = 0;
      for (int i=0; i<str.length(); i++) {
         if (str.charAt(i) == '.') {
            nump++;
         }
      }
      return nump;
   }

   private void writePreamble(PrintWriter pw) {
      pw.println ("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
      pw.println ("<?NLS TYPE=\"org.eclipse.help.toc\"?>");
      pw.println ("");
   }

   boolean startsWithLetter (String str) {
      return (Character.isLetter(str.charAt(0)) &&
              (str.length() == 1 || !Character.isLetter(str.charAt(1))));
   }

   public void build (IndentingPrintWriter pw, String name) throws IOException {
      Document doc = Jsoup.parse (new File(name), "UTF-8", "");
      Elements links = doc.select("a[href]"); // a with href
      Element docTitle = doc.select("title").first(); // docTitle

      if (docTitle == null) {
         throw new IOException ("toc file "+name+" does not contain a title");
      }
      HashSet<String> usedPrefixes = new HashSet<String>();

      ArrayList<TocEntry> entries = new ArrayList<TocEntry>();
      for (Element e : links) {
         String href = e.attr("href");
         String title = e.text();
         String prefix = getPrefix (title);
         if (!usedPrefixes.contains(prefix)) {
            if (prefix.equals ("Preface")) {
               entries.add (new TocEntry ("Preface", href, 0));
               usedPrefixes.add (prefix);
            }
            else if (prefix.equals ("Bibliography")) {
               entries.add (new TocEntry ("Bibliography", href, 0));
               usedPrefixes.add (prefix);
            }
            else if (Character.isDigit(prefix.charAt(0))) {
               int level = numPeriods (prefix);
               if (level == 0 && href.startsWith ("Ch")) {
                  title = "Chapter "+title;
               }          
               entries.add (new TocEntry (title, href, level));
               usedPrefixes.add (prefix);
            }
            else if (startsWithLetter (prefix)) {
               int level = numPeriods (prefix);
               if (level == 0) {
                  title = "Appendix "+title;
               }          
               entries.add (new TocEntry (title, href, level));
               usedPrefixes.add (prefix);
            }
            else if (href.startsWith ("Chx") && href.endsWith (".html")) {
               // subsection of preface or other front matter
               int level = numPeriods (href)-1;
               entries.add (new TocEntry (title, href, level));
               usedPrefixes.add (prefix);             
            }
            else {
               System.out.println ("ignoring " + title + " href=" + href);
            }
         }
      }

      writePreamble(pw);
      pw.println ("<toc label=\"" + docTitle.text() +"\">");
      boolean lastTopicOpen = false;
      int prevLevel = 0;
      pw.addIndentation (4);
      for (int i=0; i<entries.size(); i++) {
         TocEntry e = entries.get(i);
         
         int nextLevel = 0;
         if (i+1 < entries.size()) {
            nextLevel = entries.get(i+1).level;
         }
         if (prevLevel > e.level) {
            while (prevLevel > e.level) {
               pw.addIndentation (-4);
               prevLevel--;
               pw.println ("</topic>");
            }
         }
         else {
            while (prevLevel < e.level) {
               pw.addIndentation (4);
               prevLevel++;
            }
         }
         pw.println (
            "<topic label=\"" +e.title +
            "\" href=\"" + myHtmlPrefix+e.href + 
            (e.level >= nextLevel ? "\"/>" : "\">"));
         prevLevel = e.level;
      }
      while (prevLevel > 0) {
         pw.addIndentation (-4);
         prevLevel--;
         pw.println ("</topic>");
      }
      pw.addIndentation (-4);
      pw.println ("</toc>");
   }

   private static void printUsage () {
      System.out.println (
"Usage: BuildInfoCenterToc [-htmlPrefix <prefix>] [-out <outFile>] <tocFile>");
   }

   public static void main (String[] args) {
      String htmlPrefix = "";
      String tocFile = null;
      String outFile = null;
      for (int i=0; i<args.length; i++) {
         if (args[i].equals ("-htmlPrefix")) {
            if (++i >= args.length) {
               System.out.println (
                  "Error: -htmlPrefix requires and additional argument");
            }
            htmlPrefix = args[i];
         }
         else if (args[i].equals ("-out")) {
            if (++i >= args.length) {
               System.out.println (
                  "Error: -out requires and additional argument");
            }
            outFile = args[i];
         }
         else if (args[i].charAt(0) != '-' && tocFile == null) {
            tocFile = args[i];
         }
         else {
            printUsage();
            System.exit(1);
         }
      }
      if (tocFile == null) {
         printUsage();
         System.exit(1);
      }
      
      BuildInfoCenterToc builder = new BuildInfoCenterToc();
      builder.setHtmlPrefix (htmlPrefix);
      try {
         IndentingPrintWriter pw = null;
         if (outFile != null) {
            pw = ArtisynthIO.newIndentingPrintWriter (outFile);
         }
         else {
            pw = new IndentingPrintWriter (new PrintWriter (System.out));
         }
         builder.build (pw, tocFile);
         pw.close();
      }
      catch (Exception e) {
         System.out.println (e);
      }
   }
}

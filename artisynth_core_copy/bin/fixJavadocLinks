#!/usr/bin/perl 

# Goes through a set of html files and fixes all javadoc method
# references so that they match the named locations within the
# corresponding javadoc file, thus ensuring that links through the
# reference navigate to the correct file location.

$jdocDir = "../javadocs";
$htmlDir =".";

sub printUsageAndExit {
    print "Usage: fixJavadocLinks [--jdocDir <dir>] [--htmlDir <dir>] <file>";
    exit 1;
}

while ($_ = $ARGV[0], /^-/) {
    shift;
    if (/^--jdocDir$/) {
	$jdocDir = shift;
	if (!defined $jdocDir) {
	    printUsageAndExit();
	}
    }
    elsif (/^--htmlDir$/) {
	$htmlDir = shift;
	if (!defined $htmlDir) {
	    printUsageAndExit();
	}
    }
    else {
	printUsageAndExit();
    }
}

$fileName = $ARGV[0];
if (!defined $fileName) {
    printUsageAndExit();
}

open (INPUT, $fileName) or warn "Can't open $inFileName: $!\n";
while (<INPUT>) { 
	s/\@JDOCDIR\/([^\s]*)\.html/replaceDots($1)/eg;
	s/\@JDOCDIR\/(([^\s]*)\.html)\#([^"(]*)\(([^)]*)\)/fixMethodRef($1,$3,$4)/eg;
#	s/(href|HREF)\s*=\s*"([^"\#]*\/javadocs\/[^\#"]*\.html)\#([^"(]*)\(([^)]*)\)"/fixMethodRef($2,$3,$4)/eg; #
	s/\@JDOCDIR/$jdocDir/g;
        print $_;
}
close INPUT;

sub replaceDots {
    my $str = $_[0];
    $str =~ s/\./\//g;
    return "\@JDOCDIR/$str.html";
}

# Returns the substitution string for a matched method reference.
# The inputs consist of the javadoc filename for the class,
# the method name itself, and the current argument string
# for the method (the latter may be null).
sub fixMethodRef {
    my $classFile = $_[0];
    my $methodName = $_[1];
    my $methodArgs = $_[2];
    # create an expression for matching the current argument string
    # againts the arguments found in the javadoc file
    my $argexp = $methodArgs;
    # backslash any dots or braces
    $argexp =~ s/([\.\[\]])/\\\1/g;
    $argexp = ".*" . join (".*,.*" , split (',', $argexp)) . ".*";
    # get a hashTable mapping each method name to an array of
    # possible argument lists
    my %methodTable = getMethodTable ("$htmlDir/$jdocDir/$classFile");
#    foreach (keys %methodTable) {
#	print "$_: @{ $methodTable{$_} } \n";
#    }
#    print "argexp: $argexp\n";
    # find the candiate argument sets for the current method name
    $argListsRef = $methodTable{$methodName};
    if ($argListsRef != null) {
	# try to match these to the current argument string
	foreach ( @{$argListsRef} ) {
	    if ($_ =~ /$argexp/) {
#		warn "$methodName: ($methodArgs) replaced with ($_)\n";
		$methodArgs = $_;
		last;
	    }
	    else {
		warn "No match found for $methodName($methodArgs)\n";
	    }
	}	    
    }
#    return "href=\"$classFile\#$methodName\($methodArgs\)\"";
    return "\@JDOCDIR/$classFile\#$methodName\($methodArgs\)";
}

# Finds or creates the table of named methods contained within
# a particular javadoc file. Once created, the table is itself stored
# in the hashtable 'allMethodTables' for later use.
sub getMethodTable {
    my $file = $_[0];
    $methodTabRef = $allMethodTables{$file};
    if ($methodTabRef != null) {
	return %{ $methodTabRef };
    }
    open (JAVADOC_INPUT, $file) or warn "Can't open $file: $!\n";
    while (<JAVADOC_INPUT>) { 
	while ( /(NAME|name)\s*=\s*"([a-zA-Z_][\w_]*)\(([^)]*)\)"/g) {
	    push @{ $methodTable{$2} }, $3;
	}
    }
    $allMethodTables{$file} = { %methodTable };
    return %methodTable;
}


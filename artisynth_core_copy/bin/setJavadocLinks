#!/usr/bin/perl 
#
# Processes an HTML or PostScript file to set the correct hypertext
# links for javadoc references. Each reference is specified by either
#
# @JDOCBEGIN/<className>@JDOCEND
#
# for classes, or 
#
# @JDOCBEGIN/<className>.<methodName>(<argSignature>)@JDOCEND
#
# for methods. <className> should be a fully qualified class name
# (i.e., all package components should be present). The <argSignature>
# for a method should be a comma separated list of argument types.
# The signature does not have to be complete; it only needs to
# be complete enough to distinquish it from other methods with
# the same name.
#
# This program also replaces the string
#
# @ARTISYNTHDOCBASE
#
# which the URL for the base directory for ArtiSynth documentation,
# as specified by the variable docBase.
#
# Javadoc URLs are created from the specification by
#
# 1) replacing '.' with '/' and '$' with '.' in <className> and
# locating the Javadoc file for the class;
# 
# 2) for methods, parsing the (possibly incomplete) <argSignature>
# and finding the matching method and location in the Javadoc file;
#
# 3) removing @JDOCEND and replacing @JDOCBEGIN with the leading part
# of the URL to the javadoc directory, indicated by the jdocUrl
# variable.
#
# For example, the class specification
#
# @JDOCBEGIN/artisynth.core.models.ModelBase@JDOCEND
#
# would be replaced with
#
# $jdocUrl/artisynth/core/models/ModelBase.html
#
# while the method specification
#
# @JDOCBEGIN/maspack.matrix.MatrixNd.mul(MatrixNd,MatrixNd)@JDOCEND
#
# would be replaced with
#
# @jdocUrl/maspack.matrix.MatrixNd.mul(MatrixNd,MatrixNd)
#
# As mention above, the argument signature for methods only needs
# to be complete enough to unambiguously match the method. In the
# above example, MatrixNd has only three methods named 'mul':
#
#   mul(DenseMatrixBase,DenseMatrixBase)
#   mul(MatrixNd,MatrixNd)
#   mul(MatrixNd)
#
# and so an argument signature of (MatrixNd,) or (,MatrixNd) would be
# sufficient to provide a match. If the method name is unqiue, the
# argument signature can even be empty.

# specifies the output file. "-" indicates standard output.
$outfileName = "-";

# if not zero, indicates that this program is being run on postscript
$postscript = 0;

sub printUsageAndExit {
    print "Usage: fixJavadocLinks [--jdocDir <dir>] [--jdocUrl <url>]\n";
    print "       [--docBase <url>] [--out <outfile>] [--postscript] <infile>\n";
    exit 1;
}

while ($_ = $ARGV[0], /^-/) {
    shift;
    if (/^--jdocDir$/) {
	$jdocDir = shift;
	if (!defined $jdocDir) {
	    printUsageAndExit();
	}
    }
    elsif (/^--jdocUrl$/) {
	$jdocUrl = shift;
	if (!defined $jdocUrl) {
	    printUsageAndExit();
	}
    }
    elsif (/^--docBase$/) {
	$docBase = shift;
	if (!defined $docBase) {
	    printUsageAndExit();
	}
    }
    elsif (/^--out$/) {
	$outfileName = shift;
	if (!defined $outfileName) {
	    printUsageAndExit();
	}
    }
    elsif (/^--postscript$/) {
	$postscript = 1;
    }
    else {
	printUsageAndExit();
    }
}

if (!defined $docBase) {
    # URL for base directory of the ArtiSynth documentation. By default,
    # this is  "../..", meaning that it is assumed to be two directories
    # up from the current HTML file. When setting links in PostScript
    # files, docBase should be set to a network based URL, such
    # as http://www.artisynth.org/doc.
    $docBase = "../..";
}

if (!defined $jdocUrl) {
    # base URL for the javadocs to be placed in the output html files
    $jdocUrl = "$docBase/javadocs";
}

if (!defined $jdocDir) {
    # location of the javadoc files relative to the directory in which
    # this command is being run. This is used for actually finding the
    # javadoc files so that they can be parsed and their methods located.
    $jdocDir = "../javadocs";
}

$infileName = $ARGV[0];
if (!defined $infileName) {
    printUsageAndExit();
}

open (INPUT, $infileName) or warn "Can't open $infileName: $!\n";
#if ($postscript) {
#    binmode INPUT;
#}
if ($outfileName ne "-") {
    open (OUTPUT, ">", $outfileName) or warn "Can't open $outfileName: $!\n";
    #if ($postscript) {
    #    binmode OUTPUT;
    #}
}

while (<INPUT>) { 
    s/\@ARTISYNTHDOCBASE/$docBase/g;
    s/\@JDOCBEGIN\/([^\s()]*)\@JDOCEND/replaceDots($1)/eg;
    if ($postscript) {
        s/\@JDOCBEGIN\/([^\s()]*)\.([^.(]*)\\\(([^)]*)\\\)\@JDOCEND/fixMethodRef($1,$2,$3)/eg;
    }
    else {
        s/\@JDOCBEGIN\/([^\s()]*)\.([^.(]*)\(([^)]*)\)\@JDOCEND/fixMethodRef($1,$2,$3)/eg;
    }
    s/\@JDOCBEGIN\//$jdocUrl\//g;
    # literal symbols for @JDOCBEGIN, @JDOCEND, @ARTISYNTHDOCBASE:
    #s/\@JD\@CBEGIN/\@JDOCBEGIN/g; 
    #s/\@JD\@OCEND/\@JDOCEND/g;
    #s/\@ARTISYNTHD\@CBASE/\@ARTISYNTHDOCBASE/g;
    if ($outfileName ne "-") {
        print OUTPUT $_;
    }
    else {
        print $_;
    }
}
close INPUT;
if ($outfileName ne "-") {
    close OUTPUT;
}

sub replaceDots {
    my $className = $_[0];
    # sometime $ might have been turned into %24; if so, set it back:
    $className =~ s/\%24/\$/g;
    # this appears instead of a dollar sign in postscript output:
    $className =~ s/\\\\protect\\040\\\\T1\\\\textdollar\\040/\$/g;
    my $classFile = $className;
    $classFile =~ s/\./\//g;
    $classFile =~ s/\$/\./g;
    my $classLink; # this will be the filename, plus any '#' tag
    # see if classFile has a '#' tag at the end. If so, remove it and place
    # it at the end, after the ".html"
    if ( $classFile =~ m/(^.*)(\#[^#]*$)/ ) {
        $classFile = "$1.html";
        $classLink = "$1.html$2";
    }
    else {
        $classFile = "$classFile.html";
        $classLink = $classFile;
    }
    if (!(-e "$jdocDir/$classFile")) {
       warn "WARNING: class $className not found\n";
    }
    return "\@JDOCBEGIN/$classLink";
}

# Returns the substitution string for a matched method reference.  The
# inputs consist of the javadoc filename for the class, the method
# name itself, and the current argument string for the method (the
# latter may be null).
sub fixMethodRef {
    my $className = $_[0];
    my $methodName = $_[1];
    my $methodArgs = $_[2];

    my $classFile = $className;
    $classFile =~ s/\./\//g;
    $classFile = $classFile . ".html";
    # create an expression for matching the current argument string
    # againts the arguments found in the javadoc file
    my $argexp = $methodArgs;
    # backslash any dots or braces

    # get a hashTable mapping each method name to an array of
    # possible argument lists
    my %methodTable = getMethodTable ("$jdocDir/$classFile");
    # method table may also store a Javadoc version
    if ($methodTable{"_JavadocVersion_"} eq "1.8") {
        $java8 = 1;
    }
    $argexp =~ s/([\.\[\]])/\\\1/g;
    if ($java8) {
        $argexp =~ s/,/.*-.*/g;
    }
    else {
        $argexp =~ s/,/.*,.*/g;
    }
    $argexp = ".*" . $argexp . ".*";

    # find the candiate argument sets for the current method name
    $argListsRef = $methodTable{$methodName};
    if ($argListsRef != null) {
	# try to match these to the current argument string
	$matched = 0;
	foreach ( @{$argListsRef} ) {
	    if ($_ =~ /$argexp/) {
		# warn "$methodName: ($methodArgs) replaced with ($_) using ($argexp)\n";
		$methodArgs = $_;
		$matched = 1;
		last;
	    }
	}	    
	if (!$matched) {
	    warn "WARNING: No argument match found for $methodName($methodArgs)\n";
	}
    }
    else {
        if (!(-e "$jdocDir/$classFile")) {
            warn "WARNING: class $className not found for method $methodName\n";
        }
        else {
            warn "WARNING: method $methodName not found for class $className\n";
        }
    }
    if ($java8) {
        return "\@JDOCBEGIN/$classFile\#$methodName-$methodArgs-";
    }
    elsif ($postscript) {
        return "\@JDOCBEGIN/$classFile\#$methodName\\\($methodArgs\\\)";
    }
    else {
        return "\@JDOCBEGIN/$classFile\#$methodName\($methodArgs\)";
    }
}

# Finds or creates the table of named methods contained within
# a particular javadoc file. Once created, the table is itself stored
# in the hashtable 'allMethodTables' for later use.
sub getMethodTable {
    my $file = $_[0];
    $methodTabRef = $allMethodTables{$file};
    if ($methodTabRef != null) {
	return %{ $methodTabRef };
    }
    my %methodTable=();
    $methodTable{"_JavadocVersion_"} = "<=1.7";
    open (JAVADOC_INPUT, $file) or warn "Can't open $file: $!\n";
    # note that we have to use double backslash (\\) since we are in a string
    $methodMatch = "(NAME|name)\\s*=\\s*\"([a-zA-Z_][\\w_]*)\\(([^)]*)\\)\"";
    while (<JAVADOC_INPUT>) { 
        if ( /javadoc \(\s*[^0-9]*\s*1.8/ ) {
            # Javadoc 1.8 detected
            $methodTable{"_JavadocVersion_"} = "1.8";
            $methodMatch = "(NAME|name)\\s*=\\s*\"([a-zA-Z_][\\w_]*)-(.*)-\"";
        }
	while ( /$methodMatch/g ) {
	    push @{ $methodTable{$2} }, $3;
	}
    }
    $allMethodTables{$file} = { %methodTable };
    return %methodTable;
}

### USER DEFINED SETTINGS

tonguePath = "models/0/models/0/"
tongueNodeListPath = tonguePath + "nodes/"

# Number of observations/trials/waypoints to add to the matrix. Use -1 if want to use all.
# 250 is good enough if you need a data matrix quickly for testing.
numTrials = -1

# these variables will be initialized from a data file called "toMatrixVariables.txt" in the wp folder. Shouldn't modify
excitIncrement = None
excitMin = None
excitMax = None
numExciters = None

# starting directory to waypoint files. Shouldn't modify.
wpOutputStartDir = "wpOutput/"

# used to compare two floats. Shouldn't have to modify
ELIPSON = 0.0001




"""
Requirements before running this script:
    
    - Load the hexTongueDemo model in artisynth
    - Make sure the wpOutput/ folder contains toMatrixVariables.txt
    
    toMatrixVariables.txt will automatically be generated by staticTongueGenerator.py.
    If you used an older version of staticTongueGenerator.py, you can manually create
    toMatrixVariables.txt in wpOutput. The layout is:
    
        excitMin
        excitIncrement
        excitMax
        number of exciters
    
    For example:
        >>> cat <artisynth>/wpOutput/toMatrixVariables.txt
        0
        0.2
        0.4
        11

"""
"""
What does this script do?

It will iterate through the pre-generated waypoint files and dump all the tongue node positions
into a matrix. When the matrix contains all the data from all the waypoints, the script will save
the matrix as a file using ObjectOutputStream. The file can be restored back to a matrix using another
program/script and use that matrix for PCA.

The data matrix layout:
    
          Node #1         Node #2   ....       Last Node (#m)
      __________________________________________________________
Sim1 | x11, y11, z11,    x12, y12, z12    ....,    x1m, y1m, z1m |
Sim2 | x21, y21, z21,    x22, y22, z22    ....,    x2m, y2m, z2m |
Sim3 | x31  ...                ....                              |
Sim4 | x41  ...                ....                              |
Sim5 | x51
 ..                                                              |
Last |                                                           |
Sim  | xn1, yn1, zn1,                     .....,   xnm, ynm, znm |
(#n) |                                                           |
      ------------------------------------------------------------

Node #1 corresponds to the first node
Node #2 corresponds to the second node

Each sim# corresponds to an existing pre-generated waypoint file.
"""





import java.io.File
import java.io.DataInputStream
import java.io.FileInputStream
import java.io.FileOutputStream
import java.io.ObjectOutputStream

import java.util.LinkedList as LinkedList
import java.util.ListIterator as ListIterator

import maspack.matrix.MatrixNd

### FUNCTION DEFINITIONS

"""
Function that behaves similar to a C++ style "for" loop involving <=
@param:
    start :: double - minimum number
    end :: double - maximum number
    step :: double - how much do you want to increment at every iteration
    
    ELIPSON :: global double - small value used to compare 2 floats (e.g. 0.0001)
@return:
    yields all the intervals from start to end (inclusively), incremented by "step"
"""
def CLessEqualLoop(start, end, step):
    while start <= end + ELIPSON:
        yield start
        start += step






"""
Initialize global variables from data file. The data will be generated from
staticTongueGenerator.py, which creates a file called toMatrixVariables.txt, located
in <folderLocation>.
@param:
    folderLocation :: string - directory path to toMatrixVariables.txt. Should be
                               wpOutput/ by default.
    
    excitIncrement :: global
    excitMin :: global
    excitMax :: global
    numExciters :: global
@return: none
"""
def initGlobalVariables(folderLocation):
    scanner = java.util.Scanner( File(folderLocation + "toMatrixVariables.txt") )
    global excitMin
    global excitIncrement
    global excitMax
    global numExciters
    excitMin = scanner.nextDouble()
    excitIncrement = scanner.nextDouble()
    excitMax = scanner.nextDouble()
    numExciters = scanner.nextInt()
    scanner.close()





"""
Does the specified waypoint file exist?
@param:
    startingDir :: string - starting directory of where all the waypoint files
                            are located.
    excitePath :: string - starting from startingDir, excitePath leads to
                           location of waypoint file. e.g. <startingDir>0.0/0.1/0.1/<lastExciteValue>
    lastExciteValue :: double - the final value of supposedly exciter
@return:
    True if waypoint file exists, false otherwise
"""
def waypointExists(startingDir, excitePath, lastExciteValue):
    wpPath = startingDir + excitePath + str(lastExciteValue) + "_wp.txt"
    wpFile = File(wpPath)
    return wpFile.exists()




"""
Adjust the tongue model as specified by the waypoint.
@param:
    startingDir :: string - starting directory of where all the waypoint files
                            are located.
    excitePath :: string - starting from startingDir, excitePath leads to
                           location of waypoint file. e.g. <startingDir>0.0/0.1/0.1/<waypointFile>
    lastExciteValue :: double - the final value of supposedly exciter
@return: None
"""
def loadModelStateFromWaypoint(startingDir, excitePath, lastExciteValue):
    wpPath = startingDir + excitePath + str(lastExciteValue) + "_wp.txt"
    Main.getRootModel().getWayPoints().setAttachedFileName(wpPath)
    waypointFile = Main.getRootModel().getWayPoints().getAttachedFile()
    dis = DataInputStream( FileInputStream (waypointFile) )
    dis.readInt()
    dis.readDouble()
    cs = Main.getRootModel().createState()
    cs.readBinary(dis)
    dis.readDouble()
    cs = Main.getRootModel().createState()
    cs.readBinary(dis)
    Main.getRootModel().setState(cs)
    Main.getRootModel().rerender()






"""
Append a row of node data (current tongue position) to the matrix
@param:
    tongueNodeList :: list - references to nodes that define tongue shape
    matrix :: maspack.matrix.MatrixNd - Matrix used to store tongue node positions.
                                        Should pass empty 0x0 matrix on first call
@return: none
"""
def addNodesPosToMatrix(tongue, tongueNodeList, matrix):
    x = 0
    y = 1
    z = 2
    matrix.setSize(matrix.rowSize()+1, tongueNodeList.size()*3)
    curColBlockIdx = 0                # the next 1x3 column of where the next x data is to be inserted in the appended row
    for nodeIdx in range(0, tongueNodeList.size() ):
        curCol = curColBlockIdx * 3
        matrix.set(matrix.rowSize()-1, curCol, tongueNodeList.get(nodeIdx).getPosition().get(x))
        matrix.set(matrix.rowSize()-1, curCol+1, tongueNodeList.get(nodeIdx).getPosition().get(y))
        matrix.set(matrix.rowSize()-1, curCol+2, tongueNodeList.get(nodeIdx).getPosition().get(z))
        curColBlockIdx += 1





"""
It will iterate through the pre-generated waypoint files and dump the surface tongue node positions
into a matrix.
@param:
    matrix :: maspack.matrix.MatrixNd - Matrix used to store tongue node positions.
                                        Should pass empty 0x0 matrix on first call
    numExciters :: int - number of exciters
    tongueNodeList :: list - references to nodes that define tongue shape
    tongue :: FemMuscleModel - reference to the tongue
    min :: double - minimum excitation level
    cur :: double - the current exciter idx that's being iterated through. First call should pass 0
    increment :: double - how much do you want to increment the excitation level per iteration?
    max :: double - maximum excitation leveL
    excitePath :: string - relative directory path so far using excitation values only.
                           (e.g. 0.0/0.1/...). First call should pass empty string ""
    wpOutputStartDir :: string - starting directory location of where waypoint files should be stored
    
    numTrials :: global int - number of waypoints/trials to record in the waypoint
"""
def iterateThroughWaypointsAndRecordToMatrix(matrix, numExciters, tongue, tongueNodeList, min, cur, increment, max, excitePath, wpOutputStartDir):
    global numTrials
    if cur == numExciters - 1:
        for i in CLessEqualLoop(min, max, increment):
            if numTrials == 0:
                return
            if waypointExists(wpOutputStartDir, excitePath, i):
                loadModelStateFromWaypoint(wpOutputStartDir, excitePath, i)
                addNodesPosToMatrix(tongue, tongueNodeList, matrix)
                if numTrials != -1 and numTrials > 0:
                    numTrials -= 1
    else:
        for i in CLessEqualLoop(min, max, increment):
            if numTrials == 0:
                return
            iterateThroughWaypointsAndRecordToMatrix(matrix, numExciters, tongue, tongueNodeList, min, cur+1, increment, max, excitePath + str(i) + "/", wpOutputStartDir)





"""
Save a java object as a file.
@param:
    object :: any java object - object that you would like to save as a file
    folderLocation :: String - directory path for the new file, ending with "/"
    nameOfFile :: String - name for the new file (e.g. bankAccount.obj)

@return: none
"""
def saveObjToFile(object, folderLocation, nameOfFile):
    objOutStream = ObjectOutputStream(FileOutputStream(folderLocation + nameOfFile))
    objOutStream.writeObject(object)



"""
Used for debugging. Allows contents of matrix to be seen and read instead of in
binary form.
"""
def saveObjStringToTextFile(object, folderLocation, nameOfFile):
    textFile = open(folderLocation + nameOfFile, "w")
    textFile.write(object.toString( NumberFormat("%g") ))
    textFile.close()




### MAIN CODE BODY

# load data to initialize the global variable
initGlobalVariables(wpOutputStartDir)

# this list below will hold reference to all the tongue nodes
tongueNodeList = find( tongueNodeListPath )

# create a matrix to store the node positions
matrix = MatrixNd()

tongue = find( tonguePath )

iterateThroughWaypointsAndRecordToMatrix(matrix, numExciters, tongue, tongueNodeList, excitMin, 0, excitIncrement, excitMax, "", wpOutputStartDir)

#saveObjStringToTextFile(matrix, wpOutputStartDir, "dataMatrix.txt")
saveObjToFile(matrix, wpOutputStartDir, "dataMatrix.bin")
#script("toMatrix.py")